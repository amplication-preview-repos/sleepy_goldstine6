/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SuggestionRequest } from "./SuggestionRequest";
import { SuggestionRequestCountArgs } from "./SuggestionRequestCountArgs";
import { SuggestionRequestFindManyArgs } from "./SuggestionRequestFindManyArgs";
import { SuggestionRequestFindUniqueArgs } from "./SuggestionRequestFindUniqueArgs";
import { CreateSuggestionRequestArgs } from "./CreateSuggestionRequestArgs";
import { UpdateSuggestionRequestArgs } from "./UpdateSuggestionRequestArgs";
import { DeleteSuggestionRequestArgs } from "./DeleteSuggestionRequestArgs";
import { NameSuggestionFindManyArgs } from "../../nameSuggestion/base/NameSuggestionFindManyArgs";
import { NameSuggestion } from "../../nameSuggestion/base/NameSuggestion";
import { Customer } from "../../customer/base/Customer";
import { Questionnaire } from "../../questionnaire/base/Questionnaire";
import { SuggestionRequestService } from "../suggestionRequest.service";
@graphql.Resolver(() => SuggestionRequest)
export class SuggestionRequestResolverBase {
  constructor(protected readonly service: SuggestionRequestService) {}

  async _suggestionRequestsMeta(
    @graphql.Args() args: SuggestionRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SuggestionRequest])
  async suggestionRequests(
    @graphql.Args() args: SuggestionRequestFindManyArgs
  ): Promise<SuggestionRequest[]> {
    return this.service.suggestionRequests(args);
  }

  @graphql.Query(() => SuggestionRequest, { nullable: true })
  async suggestionRequest(
    @graphql.Args() args: SuggestionRequestFindUniqueArgs
  ): Promise<SuggestionRequest | null> {
    const result = await this.service.suggestionRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SuggestionRequest)
  async createSuggestionRequest(
    @graphql.Args() args: CreateSuggestionRequestArgs
  ): Promise<SuggestionRequest> {
    return await this.service.createSuggestionRequest({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        questionnaire: args.data.questionnaire
          ? {
              connect: args.data.questionnaire,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SuggestionRequest)
  async updateSuggestionRequest(
    @graphql.Args() args: UpdateSuggestionRequestArgs
  ): Promise<SuggestionRequest | null> {
    try {
      return await this.service.updateSuggestionRequest({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          questionnaire: args.data.questionnaire
            ? {
                connect: args.data.questionnaire,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SuggestionRequest)
  async deleteSuggestionRequest(
    @graphql.Args() args: DeleteSuggestionRequestArgs
  ): Promise<SuggestionRequest | null> {
    try {
      return await this.service.deleteSuggestionRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [NameSuggestion], { name: "nameSuggestions" })
  async findNameSuggestions(
    @graphql.Parent() parent: SuggestionRequest,
    @graphql.Args() args: NameSuggestionFindManyArgs
  ): Promise<NameSuggestion[]> {
    const results = await this.service.findNameSuggestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: SuggestionRequest
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Questionnaire, {
    nullable: true,
    name: "questionnaire",
  })
  async getQuestionnaire(
    @graphql.Parent() parent: SuggestionRequest
  ): Promise<Questionnaire | null> {
    const result = await this.service.getQuestionnaire(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
