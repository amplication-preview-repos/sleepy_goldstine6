/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SuggestionRequest as PrismaSuggestionRequest,
  NameSuggestion as PrismaNameSuggestion,
  Customer as PrismaCustomer,
  Questionnaire as PrismaQuestionnaire,
} from "@prisma/client";

export class SuggestionRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SuggestionRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.suggestionRequest.count(args);
  }

  async suggestionRequests(
    args: Prisma.SuggestionRequestFindManyArgs
  ): Promise<PrismaSuggestionRequest[]> {
    return this.prisma.suggestionRequest.findMany(args);
  }
  async suggestionRequest(
    args: Prisma.SuggestionRequestFindUniqueArgs
  ): Promise<PrismaSuggestionRequest | null> {
    return this.prisma.suggestionRequest.findUnique(args);
  }
  async createSuggestionRequest(
    args: Prisma.SuggestionRequestCreateArgs
  ): Promise<PrismaSuggestionRequest> {
    return this.prisma.suggestionRequest.create(args);
  }
  async updateSuggestionRequest(
    args: Prisma.SuggestionRequestUpdateArgs
  ): Promise<PrismaSuggestionRequest> {
    return this.prisma.suggestionRequest.update(args);
  }
  async deleteSuggestionRequest(
    args: Prisma.SuggestionRequestDeleteArgs
  ): Promise<PrismaSuggestionRequest> {
    return this.prisma.suggestionRequest.delete(args);
  }

  async findNameSuggestions(
    parentId: string,
    args: Prisma.NameSuggestionFindManyArgs
  ): Promise<PrismaNameSuggestion[]> {
    return this.prisma.suggestionRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .nameSuggestions(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.suggestionRequest
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getQuestionnaire(
    parentId: string
  ): Promise<PrismaQuestionnaire | null> {
    return this.prisma.suggestionRequest
      .findUnique({
        where: { id: parentId },
      })
      .questionnaire();
  }
}
