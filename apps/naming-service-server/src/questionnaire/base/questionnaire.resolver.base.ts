/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Questionnaire } from "./Questionnaire";
import { QuestionnaireCountArgs } from "./QuestionnaireCountArgs";
import { QuestionnaireFindManyArgs } from "./QuestionnaireFindManyArgs";
import { QuestionnaireFindUniqueArgs } from "./QuestionnaireFindUniqueArgs";
import { CreateQuestionnaireArgs } from "./CreateQuestionnaireArgs";
import { UpdateQuestionnaireArgs } from "./UpdateQuestionnaireArgs";
import { DeleteQuestionnaireArgs } from "./DeleteQuestionnaireArgs";
import { SuggestionRequestFindManyArgs } from "../../suggestionRequest/base/SuggestionRequestFindManyArgs";
import { SuggestionRequest } from "../../suggestionRequest/base/SuggestionRequest";
import { Customer } from "../../customer/base/Customer";
import { QuestionnaireService } from "../questionnaire.service";
@graphql.Resolver(() => Questionnaire)
export class QuestionnaireResolverBase {
  constructor(protected readonly service: QuestionnaireService) {}

  async _questionnairesMeta(
    @graphql.Args() args: QuestionnaireCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Questionnaire])
  async questionnaires(
    @graphql.Args() args: QuestionnaireFindManyArgs
  ): Promise<Questionnaire[]> {
    return this.service.questionnaires(args);
  }

  @graphql.Query(() => Questionnaire, { nullable: true })
  async questionnaire(
    @graphql.Args() args: QuestionnaireFindUniqueArgs
  ): Promise<Questionnaire | null> {
    const result = await this.service.questionnaire(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Questionnaire)
  async createQuestionnaire(
    @graphql.Args() args: CreateQuestionnaireArgs
  ): Promise<Questionnaire> {
    return await this.service.createQuestionnaire({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Questionnaire)
  async updateQuestionnaire(
    @graphql.Args() args: UpdateQuestionnaireArgs
  ): Promise<Questionnaire | null> {
    try {
      return await this.service.updateQuestionnaire({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Questionnaire)
  async deleteQuestionnaire(
    @graphql.Args() args: DeleteQuestionnaireArgs
  ): Promise<Questionnaire | null> {
    try {
      return await this.service.deleteQuestionnaire(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SuggestionRequest], {
    name: "suggestionRequests",
  })
  async findSuggestionRequests(
    @graphql.Parent() parent: Questionnaire,
    @graphql.Args() args: SuggestionRequestFindManyArgs
  ): Promise<SuggestionRequest[]> {
    const results = await this.service.findSuggestionRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Questionnaire
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
