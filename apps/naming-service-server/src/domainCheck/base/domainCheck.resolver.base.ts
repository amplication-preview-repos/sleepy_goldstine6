/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DomainCheck } from "./DomainCheck";
import { DomainCheckCountArgs } from "./DomainCheckCountArgs";
import { DomainCheckFindManyArgs } from "./DomainCheckFindManyArgs";
import { DomainCheckFindUniqueArgs } from "./DomainCheckFindUniqueArgs";
import { CreateDomainCheckArgs } from "./CreateDomainCheckArgs";
import { UpdateDomainCheckArgs } from "./UpdateDomainCheckArgs";
import { DeleteDomainCheckArgs } from "./DeleteDomainCheckArgs";
import { NameSuggestion } from "../../nameSuggestion/base/NameSuggestion";
import { DomainCheckService } from "../domainCheck.service";
@graphql.Resolver(() => DomainCheck)
export class DomainCheckResolverBase {
  constructor(protected readonly service: DomainCheckService) {}

  async _domainChecksMeta(
    @graphql.Args() args: DomainCheckCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DomainCheck])
  async domainChecks(
    @graphql.Args() args: DomainCheckFindManyArgs
  ): Promise<DomainCheck[]> {
    return this.service.domainChecks(args);
  }

  @graphql.Query(() => DomainCheck, { nullable: true })
  async domainCheck(
    @graphql.Args() args: DomainCheckFindUniqueArgs
  ): Promise<DomainCheck | null> {
    const result = await this.service.domainCheck(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DomainCheck)
  async createDomainCheck(
    @graphql.Args() args: CreateDomainCheckArgs
  ): Promise<DomainCheck> {
    return await this.service.createDomainCheck({
      ...args,
      data: {
        ...args.data,

        nameSuggestion: args.data.nameSuggestion
          ? {
              connect: args.data.nameSuggestion,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DomainCheck)
  async updateDomainCheck(
    @graphql.Args() args: UpdateDomainCheckArgs
  ): Promise<DomainCheck | null> {
    try {
      return await this.service.updateDomainCheck({
        ...args,
        data: {
          ...args.data,

          nameSuggestion: args.data.nameSuggestion
            ? {
                connect: args.data.nameSuggestion,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DomainCheck)
  async deleteDomainCheck(
    @graphql.Args() args: DeleteDomainCheckArgs
  ): Promise<DomainCheck | null> {
    try {
      return await this.service.deleteDomainCheck(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => NameSuggestion, {
    nullable: true,
    name: "nameSuggestion",
  })
  async getNameSuggestion(
    @graphql.Parent() parent: DomainCheck
  ): Promise<NameSuggestion | null> {
    const result = await this.service.getNameSuggestion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
