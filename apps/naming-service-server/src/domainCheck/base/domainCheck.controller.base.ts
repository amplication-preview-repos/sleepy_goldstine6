/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DomainCheckService } from "../domainCheck.service";
import { DomainCheckCreateInput } from "./DomainCheckCreateInput";
import { DomainCheck } from "./DomainCheck";
import { DomainCheckFindManyArgs } from "./DomainCheckFindManyArgs";
import { DomainCheckWhereUniqueInput } from "./DomainCheckWhereUniqueInput";
import { DomainCheckUpdateInput } from "./DomainCheckUpdateInput";

export class DomainCheckControllerBase {
  constructor(protected readonly service: DomainCheckService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DomainCheck })
  async createDomainCheck(
    @common.Body() data: DomainCheckCreateInput
  ): Promise<DomainCheck> {
    return await this.service.createDomainCheck({
      data: {
        ...data,

        nameSuggestion: data.nameSuggestion
          ? {
              connect: data.nameSuggestion,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        domain: true,
        id: true,
        isAvailable: true,

        nameSuggestion: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DomainCheck] })
  @ApiNestedQuery(DomainCheckFindManyArgs)
  async domainChecks(@common.Req() request: Request): Promise<DomainCheck[]> {
    const args = plainToClass(DomainCheckFindManyArgs, request.query);
    return this.service.domainChecks({
      ...args,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        isAvailable: true,

        nameSuggestion: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DomainCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async domainCheck(
    @common.Param() params: DomainCheckWhereUniqueInput
  ): Promise<DomainCheck | null> {
    const result = await this.service.domainCheck({
      where: params,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        isAvailable: true,

        nameSuggestion: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DomainCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDomainCheck(
    @common.Param() params: DomainCheckWhereUniqueInput,
    @common.Body() data: DomainCheckUpdateInput
  ): Promise<DomainCheck | null> {
    try {
      return await this.service.updateDomainCheck({
        where: params,
        data: {
          ...data,

          nameSuggestion: data.nameSuggestion
            ? {
                connect: data.nameSuggestion,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          domain: true,
          id: true,
          isAvailable: true,

          nameSuggestion: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DomainCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDomainCheck(
    @common.Param() params: DomainCheckWhereUniqueInput
  ): Promise<DomainCheck | null> {
    try {
      return await this.service.deleteDomainCheck({
        where: params,
        select: {
          createdAt: true,
          domain: true,
          id: true,
          isAvailable: true,

          nameSuggestion: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
