/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DomainCheck as PrismaDomainCheck,
  NameSuggestion as PrismaNameSuggestion,
} from "@prisma/client";

export class DomainCheckServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DomainCheckCountArgs, "select">
  ): Promise<number> {
    return this.prisma.domainCheck.count(args);
  }

  async domainChecks(
    args: Prisma.DomainCheckFindManyArgs
  ): Promise<PrismaDomainCheck[]> {
    return this.prisma.domainCheck.findMany(args);
  }
  async domainCheck(
    args: Prisma.DomainCheckFindUniqueArgs
  ): Promise<PrismaDomainCheck | null> {
    return this.prisma.domainCheck.findUnique(args);
  }
  async createDomainCheck(
    args: Prisma.DomainCheckCreateArgs
  ): Promise<PrismaDomainCheck> {
    return this.prisma.domainCheck.create(args);
  }
  async updateDomainCheck(
    args: Prisma.DomainCheckUpdateArgs
  ): Promise<PrismaDomainCheck> {
    return this.prisma.domainCheck.update(args);
  }
  async deleteDomainCheck(
    args: Prisma.DomainCheckDeleteArgs
  ): Promise<PrismaDomainCheck> {
    return this.prisma.domainCheck.delete(args);
  }

  async getNameSuggestion(
    parentId: string
  ): Promise<PrismaNameSuggestion | null> {
    return this.prisma.domainCheck
      .findUnique({
        where: { id: parentId },
      })
      .nameSuggestion();
  }
}
