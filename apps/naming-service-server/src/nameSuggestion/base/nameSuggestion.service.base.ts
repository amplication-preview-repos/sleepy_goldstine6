/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  NameSuggestion as PrismaNameSuggestion,
  DomainCheck as PrismaDomainCheck,
  SuggestionRequest as PrismaSuggestionRequest,
} from "@prisma/client";

export class NameSuggestionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NameSuggestionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nameSuggestion.count(args);
  }

  async nameSuggestions(
    args: Prisma.NameSuggestionFindManyArgs
  ): Promise<PrismaNameSuggestion[]> {
    return this.prisma.nameSuggestion.findMany(args);
  }
  async nameSuggestion(
    args: Prisma.NameSuggestionFindUniqueArgs
  ): Promise<PrismaNameSuggestion | null> {
    return this.prisma.nameSuggestion.findUnique(args);
  }
  async createNameSuggestion(
    args: Prisma.NameSuggestionCreateArgs
  ): Promise<PrismaNameSuggestion> {
    return this.prisma.nameSuggestion.create(args);
  }
  async updateNameSuggestion(
    args: Prisma.NameSuggestionUpdateArgs
  ): Promise<PrismaNameSuggestion> {
    return this.prisma.nameSuggestion.update(args);
  }
  async deleteNameSuggestion(
    args: Prisma.NameSuggestionDeleteArgs
  ): Promise<PrismaNameSuggestion> {
    return this.prisma.nameSuggestion.delete(args);
  }

  async findDomainChecks(
    parentId: string,
    args: Prisma.DomainCheckFindManyArgs
  ): Promise<PrismaDomainCheck[]> {
    return this.prisma.nameSuggestion
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .domainChecks(args);
  }

  async getSuggestionRequest(
    parentId: string
  ): Promise<PrismaSuggestionRequest | null> {
    return this.prisma.nameSuggestion
      .findUnique({
        where: { id: parentId },
      })
      .suggestionRequest();
  }
}
