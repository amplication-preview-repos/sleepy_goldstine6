/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NameSuggestion } from "./NameSuggestion";
import { NameSuggestionCountArgs } from "./NameSuggestionCountArgs";
import { NameSuggestionFindManyArgs } from "./NameSuggestionFindManyArgs";
import { NameSuggestionFindUniqueArgs } from "./NameSuggestionFindUniqueArgs";
import { CreateNameSuggestionArgs } from "./CreateNameSuggestionArgs";
import { UpdateNameSuggestionArgs } from "./UpdateNameSuggestionArgs";
import { DeleteNameSuggestionArgs } from "./DeleteNameSuggestionArgs";
import { DomainCheckFindManyArgs } from "../../domainCheck/base/DomainCheckFindManyArgs";
import { DomainCheck } from "../../domainCheck/base/DomainCheck";
import { SuggestionRequest } from "../../suggestionRequest/base/SuggestionRequest";
import { NameSuggestionService } from "../nameSuggestion.service";
@graphql.Resolver(() => NameSuggestion)
export class NameSuggestionResolverBase {
  constructor(protected readonly service: NameSuggestionService) {}

  async _nameSuggestionsMeta(
    @graphql.Args() args: NameSuggestionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NameSuggestion])
  async nameSuggestions(
    @graphql.Args() args: NameSuggestionFindManyArgs
  ): Promise<NameSuggestion[]> {
    return this.service.nameSuggestions(args);
  }

  @graphql.Query(() => NameSuggestion, { nullable: true })
  async nameSuggestion(
    @graphql.Args() args: NameSuggestionFindUniqueArgs
  ): Promise<NameSuggestion | null> {
    const result = await this.service.nameSuggestion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NameSuggestion)
  async createNameSuggestion(
    @graphql.Args() args: CreateNameSuggestionArgs
  ): Promise<NameSuggestion> {
    return await this.service.createNameSuggestion({
      ...args,
      data: {
        ...args.data,

        suggestionRequest: args.data.suggestionRequest
          ? {
              connect: args.data.suggestionRequest,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NameSuggestion)
  async updateNameSuggestion(
    @graphql.Args() args: UpdateNameSuggestionArgs
  ): Promise<NameSuggestion | null> {
    try {
      return await this.service.updateNameSuggestion({
        ...args,
        data: {
          ...args.data,

          suggestionRequest: args.data.suggestionRequest
            ? {
                connect: args.data.suggestionRequest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NameSuggestion)
  async deleteNameSuggestion(
    @graphql.Args() args: DeleteNameSuggestionArgs
  ): Promise<NameSuggestion | null> {
    try {
      return await this.service.deleteNameSuggestion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DomainCheck], { name: "domainChecks" })
  async findDomainChecks(
    @graphql.Parent() parent: NameSuggestion,
    @graphql.Args() args: DomainCheckFindManyArgs
  ): Promise<DomainCheck[]> {
    const results = await this.service.findDomainChecks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => SuggestionRequest, {
    nullable: true,
    name: "suggestionRequest",
  })
  async getSuggestionRequest(
    @graphql.Parent() parent: NameSuggestion
  ): Promise<SuggestionRequest | null> {
    const result = await this.service.getSuggestionRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
